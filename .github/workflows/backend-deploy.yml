name: Backend Deployment

on:
  # Deploy on release creation
  release:
    types: [created]
  # Manual trigger with environment selection
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.x'
  AWS_REGION: 'us-east-1'
  DR_REGION: 'us-west-2'
  ECR_REPOSITORY: 'precheck-backend'
  ECS_CLUSTER: 'precheck-cluster'
  ECS_SERVICE: 'backend-service'
  HEALTH_CHECK_RETRIES: '5'
  DEPLOYMENT_TIMEOUT: '900'

permissions:
  id-token: write
  contents: read
  deployments: write

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: ${{ github.event.inputs.environment || 'staging' }}
    needs: [backend-ci/build-and-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: ecr-login

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/backend.Dockerfile
          push: true
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
            ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_SERVICE }} \
            --query taskDefinition > task-definition.json

      - name: Update task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: backend
          image: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Deploy to ECS
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          codedeploy-appspec: |
            version: 0.0
            Resources:
              - TargetService:
                  Type: AWS::ECS::Service
                  Properties:
                    TaskDefinition: <TASK_DEFINITION>
                    LoadBalancerInfo:
                      ContainerName: "backend"
                      ContainerPort: 3000
                    PlatformVersion: "LATEST"
                    NetworkConfiguration:
                      AwsvpcConfiguration:
                        Subnets: ${{ secrets.SUBNET_IDS }}
                        SecurityGroups: ${{ secrets.SECURITY_GROUP_IDS }}
                    CapacityProviderStrategy:
                      - CapacityProvider: "FARGATE_SPOT"
                        Weight: 1

      - name: Monitor deployment health
        id: health-check
        run: |
          DEPLOYMENT_ID="${{ steps.deploy.outputs.deployment-id }}"
          HEALTH_CHECK_URL="${{ secrets.HEALTH_CHECK_URL }}"
          
          for i in $(seq 1 ${{ env.HEALTH_CHECK_RETRIES }}); do
            response=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
            if [ "$response" == "200" ]; then
              echo "Health check passed"
              exit 0
            fi
            echo "Attempt $i: Health check failed, retrying..."
            sleep 30
          done
          echo "Health check failed after ${{ env.HEALTH_CHECK_RETRIES }} attempts"
          exit 1

      - name: Rollback on failure
        if: failure() && steps.deploy.outcome == 'failure'
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_SERVICE }}:${{ steps.task-def.outputs.previous-revision }} \
            --force-new-deployment

      - name: Configure DR region
        if: success() && github.event.inputs.environment == 'production'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DR_ROLE_ARN }}
          aws-region: ${{ env.DR_REGION }}

      - name: Replicate to DR region
        if: success() && github.event.inputs.environment == 'production'
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ steps.ecr-login.outputs.registry }}
          
          docker pull ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker tag ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
            ${{ secrets.DR_ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          
          aws ecr get-login-password --region ${{ env.DR_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.DR_ECR_REGISTRY }}
          
          docker push ${{ secrets.DR_ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Notify deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}'
            const environment = '${{ github.event.inputs.environment || 'staging' }}'
            const message = status === 'success' 
              ? `✅ Deployment to ${environment} successful`
              : `❌ Deployment to ${environment} failed`
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            })