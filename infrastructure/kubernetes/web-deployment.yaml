apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-frontend
  namespace: precheck-me
  labels:
    app: web-frontend
    environment: production
    tier: frontend
    version: latest
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/change-cause: "Initial production deployment"
    security.policy/compliance: "pci-dss,gdpr"
    backup.policy/retention: "30d"

spec:
  # High availability with minimum 3 replicas as per requirements
  replicas: 3
  
  # Zero-downtime rolling updates
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
      
  selector:
    matchLabels:
      app: web-frontend
      tier: frontend
      
  template:
    metadata:
      labels:
        app: web-frontend
        environment: production
        tier: frontend
        version: latest
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        
    spec:
      # Security context for the pod
      securityContext:
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
          
      containers:
      - name: web-frontend
        image: precheck/web-frontend:latest
        imagePullPolicy: Always
        
        ports:
        - containerPort: 3000
          protocol: TCP
          name: http
          
        # Resource limits as per container specifications
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
            
        # Health checks
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
          
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
          
        startupProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
          
        # Configuration from ConfigMap
        envFrom:
        - configMapRef:
            name: precheck-config
            
        # Container security context
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            
      # Pod distribution and availability rules
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - web-frontend
              topologyKey: kubernetes.io/hostname
          - weight: 90
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - web-frontend
              topologyKey: topology.kubernetes.io/zone
              
      # Node failure handling
      tolerations:
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        tolerationSeconds: 300